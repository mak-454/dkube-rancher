apiVersion: v1
kind: ConfigMap
metadata:
  name: dkube-ini
data:
  dkube.ini: |
    #################################################################
    #                                                               #
    #                     DKUBE CONFIG FILE                         #
    #                                                               #
    #################################################################

    [REQUIRED]
    # Choose one of dkube/gke/okd/eks/ntnx
    KUBE_PROVIDER={{ .Values.required.kube_provider }}
    # When HA=true k8s cluster must have min 3 schedulable nodes
    HA={{ .Values.required.ha }}
    # Operator's Local Sign In Details
    # Username cannot be same as that of a namespace's name.
    # Also, following names are restricted- dkube, monitoring, kubeflow
    USERNAME={{ .Values.required.username }}
    PASSWORD={{ .Values.required.password }}
    # Dkube deploy type
    # Possible values training/serving
    DKUBE_CLUSTER={{ .Values.required.dkube_cluster }}

    [TRAINING]
    # Serving cluster access domain or ip address
    SERVING_CLUSTER_ACCESS_ENDPOINT={{ .Values.training.serving_cluster_access_endpoint }}
    # Hardcoded port for now - this needs to be allowed by firewalls
    SERVING_CLUSTER_MODEL_REGISTRY_PORT={{ .Values.training.serving_cluster_model_registry_port }}
    # Serving cluster access username
    SERVING_CLUSTER_USERNAME={{ .Values.training.serving_cluster_username }}
    # Serving cluster access password
    SERVING_CLUSTER_PASSWORD={{ .Values.training.serving_cluster_password }}

    [SERVING]
    # External access domain or ip address which is static
    EXTERNAL_ACCESS_STATIC_IP={{ .Values.serving.external_access_static_ip }}
    # Hardcoded port for now - this needs to be allowed by firewalls
    MODEL_REGISTRY_PORT={{ .Values.serving.model_registry_port }}

    [OPTIONAL]
    # version of dkube installer to be used
    DKUBE_INSTALLER_VERSION={{ .Values.optional.dkube_installer_version }}
    # version of dkube to be installed
    DKUBE_VERSION={{ .Values.optional.dkube_version }}
    # Dockerhub Secrets for OCDR images
    # If you don't create, this will be auto-created with default values.
    DKUBE_DOCKERHUB_CREDENTIALS_SECRET={{ .Values.optional.dkube_dockerhub_credentials_secret }}
    # TLS Secret of Operator's Certificate & Private Key
    # If you don't create, place your certificate and private key in $HOME/.dkube
    DKUBE_OPERATOR_CERTIFICATE={{ .Values.optional.dkube_operator_certificate }}
    # Repository from where Dkube images can be picked.
    # Format: registry/[repo]
    DKUBE_REGISTRY={{ .Values.optional.dkube_registry }}
    # Container registry username
    REGISTRY_UNAME={{ .Values.optional.registry_uname }}
    # Container registry password
    REGISTRY_PASSWD={{ .Values.optional.registry_passwd }}

    [EXTERNAL]
    # Type of dkube proxy service, possible values are nodeport and loadbalancer
    ACCESS={{ .Values.external.access }}
    # 'true' - to install MetalLB Loadbalancer
    # Must fill LB_VIP_POOL if true
    INSTALL_LOADBALANCER={{ .Values.external.install_loadbalancer }}
    # Only CIDR notation is allowed. E.g: 192.168.2.0/24
    # Valid only if INSTALL_LOADBALANCER=true
    LB_VIP_POOL_CIDR={{ .Values.external.lb_vip_pool_cidr }}

    [STORAGE]
    # Type of storage
    # Possible values: disk, pv, sc, nfs
    # Following are required fields for corresponding storage type
    #    -------------------------------------------------------
    #    STORAGE_TYPE    REQUIRED_FIELDS
    #    -------------------------------------------------------
    #    disk            STORAGE_DISK_NODE and STORAGE_DISK_PATH
    #    pv              STORAGE_PV
    #    sc              STORAGE_SC
    #    nfs             STORAGE_NFS_SERVER and STORAGE_NFS_PATH
    #    ceph            STORAGE_CEPH_MONITORS and STORAGE_CEPH_SECRET

    STORAGE_TYPE={{ .Values.storage.storage_type }}
    # Localpath on the storage node
    STORAGE_DISK_PATH={{ .Values.storage.storage_disk_path }}
    # Nodename of the storage node
    # Possible values: AUTO/<nodename>
    # AUTO - Master node will be chosen for storage if KUBE_PROVIDER=dkube
    STORAGE_DISK_NODE={{ .Values.storage.storage_disk_node }}
    # Name of persistent volume
    STORAGE_PV={{ .Values.storage.storage_pv }}
    # Name of storage class name
    # Make sure dynamic provisioner is running for the storage class name
    STORAGE_SC={{ .Values.storage.storage_sc }}
    # NFS server ip
    STORAGE_NFS_SERVER={{ .Values.storage.storage_nfs_server }}
    # NFS path (Make sure the path exists)
    STORAGE_NFS_PATH={{ .Values.storage.storage_nfs_path }}
    # Comma separated IPs of ceph monitors
    STORAGE_CEPH_MONITORS={{ .Values.storage.storage_ceph_monitors }}
    # Ceph secret
    STORAGE_CEPH_SECRET={{ .Values.storage.storage_ceph_secret }}

    # Ceph data and configuration path for internal ceph
    # Internal ceph is installed when HA=true and STORAGE_TYPE is not in ("nfs", "ceph")
    STORAGE_CEPH_PATH={{ .Values.storage.storage_ceph_path }}
